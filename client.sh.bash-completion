#  completion                               -*- shell-script -*-

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! swagger-codegen (https://github.com/swagger-api/swagger-codegen)
# ! FROM SWAGGER SPECIFICATION IN JSON.
# !
# !
# !
# ! System wide installation:
# !
# ! $ sudo cp .bash-completion /etc/bash-completion.d/
# !
# !
# ! User home installation (add this line to .bash_profile):
# !
# ! [ -r ~/.bash-completion ] && source ~/.bash-completion
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


#
# Check if this is OSX, if so defined custom init_completion
#
if [[ `uname` =~ "Darwin" ]]; then
    __osx_init_completion()
    {
        COMPREPLY=()
        _get_comp_words_by_ref cur prev words cword
    }
fi

_()
{
    local cur
    local prev
    local words
    local cword

    # The reference of currently selected REST operation
    local operation=""

    # The list of available operation in the REST service
    # It's modelled as an associative array for efficient key lookup
    declare -A operations
    operations["deleteToken"]=1
    operations["getToken"]=1
    operations["getTokens"]=1
    operations["patchToken"]=1
    operations["postToken"]=1
    operations["resetToken"]=1
    operations["getAuditLogEntries"]=1
    operations["getAuditLogEntry"]=1
    operations["deleteCustomRole"]=1
    operations["getCustomRole"]=1
    operations["getCustomRoles"]=1
    operations["patchCustomRole"]=1
    operations["postCustomRole"]=1
    operations["getEvaluations"]=1
    operations["getEvent"]=1
    operations["getEvents"]=1
    operations["getMAU"]=1
    operations["getMAUByCategory"]=1
    operations["getStream"]=1
    operations["getStreamBySDK"]=1
    operations["getStreamSDKVersion"]=1
    operations["getStreams"]=1
    operations["getUsage"]=1
    operations["deleteDestination"]=1
    operations["getDestination"]=1
    operations["getDestinations"]=1
    operations["patchDestination"]=1
    operations["postDestination"]=1
    operations["deleteEnvironment"]=1
    operations["getEnvironment"]=1
    operations["patchEnvironment"]=1
    operations["postEnvironment"]=1
    operations["resetEnvironmentMobileKey"]=1
    operations["resetEnvironmentSDKKey"]=1
    operations["copyFeatureFlag"]=1
    operations["deleteFeatureFlag"]=1
    operations["deleteFeatureFlagApprovalRequest"]=1
    operations["getExpiringUserTargets"]=1
    operations["getFeatureFlag"]=1
    operations["getFeatureFlagApprovalRequest"]=1
    operations["getFeatureFlagApprovalRequests"]=1
    operations["getFeatureFlagStatus"]=1
    operations["getFeatureFlagStatusAcrossEnvironments"]=1
    operations["getFeatureFlagStatuses"]=1
    operations["getFeatureFlags"]=1
    operations["patchExpiringUserTargets"]=1
    operations["patchFeatureFlag"]=1
    operations["postApplyFeatureFlagApprovalRequest"]=1
    operations["postFeatureFlag"]=1
    operations["postFeatureFlagApprovalRequest"]=1
    operations["postReviewFeatureFlagApprovalRequest"]=1
    operations["deleteIntegrationSubscription"]=1
    operations["getIntegrationSubscription"]=1
    operations["getIntegrationSubscriptions"]=1
    operations["getIntegrations"]=1
    operations["patchIntegrationSubscription"]=1
    operations["postIntegrationSubscription"]=1
    operations["deleteProject"]=1
    operations["getProject"]=1
    operations["getProjects"]=1
    operations["patchProject"]=1
    operations["postProject"]=1
    operations["deleteRelayProxyConfig"]=1
    operations["getRelayProxyConfig"]=1
    operations["getRelayProxyConfigs"]=1
    operations["patchRelayProxyConfig"]=1
    operations["postRelayAutoConfig"]=1
    operations["resetRelayProxyConfig"]=1
    operations["getRoot"]=1
    operations["deleteMember"]=1
    operations["getMe"]=1
    operations["getMember"]=1
    operations["getMembers"]=1
    operations["patchMember"]=1
    operations["postMembers"]=1
    operations["deleteUserSegment"]=1
    operations["getExpiringUserTargetsOnSegment"]=1
    operations["getUserSegment"]=1
    operations["getUserSegments"]=1
    operations["patchExpiringUserTargetsOnSegment"]=1
    operations["patchUserSegment"]=1
    operations["postUserSegment"]=1
    operations["updatedUnboundedSegmentTargets"]=1
    operations["getExpiringUserTargetsForUser"]=1
    operations["getUserFlagSetting"]=1
    operations["getUserFlagSettings"]=1
    operations["patchExpiringUserTargetsForFlags"]=1
    operations["putFlagSetting"]=1
    operations["deleteUser"]=1
    operations["getSearchUsers"]=1
    operations["getUser"]=1
    operations["getUsers"]=1
    operations["deleteWebhook"]=1
    operations["getWebhook"]=1
    operations["getWebhooks"]=1
    operations["patchWebhook"]=1
    operations["postWebhook"]=1

    # An associative array of operations to their parameters
    # Only include path, query and header parameters
    declare -A operation_parameters
    operation_parameters["deleteToken"]="tokenId= "
    operation_parameters["getToken"]="tokenId= "
    operation_parameters["getTokens"]="showAll= "
    operation_parameters["patchToken"]="tokenId= "
    operation_parameters["postToken"]=""
    operation_parameters["resetToken"]="tokenId= expiry= "
    operation_parameters["getAuditLogEntries"]="before= after= q= limit= spec= "
    operation_parameters["getAuditLogEntry"]="resourceId= "
    operation_parameters["deleteCustomRole"]="customRoleKey= "
    operation_parameters["getCustomRole"]="customRoleKey= "
    operation_parameters["getCustomRoles"]=""
    operation_parameters["patchCustomRole"]="customRoleKey= "
    operation_parameters["postCustomRole"]=""
    operation_parameters["getEvaluations"]="envId= flagKey= "
    operation_parameters["getEvent"]="type= "
    operation_parameters["getEvents"]=""
    operation_parameters["getMAU"]=""
    operation_parameters["getMAUByCategory"]=""
    operation_parameters["getStream"]="source= "
    operation_parameters["getStreamBySDK"]="source= "
    operation_parameters["getStreamSDKVersion"]="source= "
    operation_parameters["getStreams"]=""
    operation_parameters["getUsage"]=""
    operation_parameters["deleteDestination"]="projectKey= environmentKey= destinationId= "
    operation_parameters["getDestination"]="projectKey= environmentKey= destinationId= "
    operation_parameters["getDestinations"]=""
    operation_parameters["patchDestination"]="projectKey= environmentKey= destinationId= "
    operation_parameters["postDestination"]="projectKey= environmentKey= "
    operation_parameters["deleteEnvironment"]="projectKey= environmentKey= "
    operation_parameters["getEnvironment"]="projectKey= environmentKey= "
    operation_parameters["patchEnvironment"]="projectKey= environmentKey= "
    operation_parameters["postEnvironment"]="projectKey= "
    operation_parameters["resetEnvironmentMobileKey"]="projectKey= environmentKey= expiry= "
    operation_parameters["resetEnvironmentSDKKey"]="projectKey= environmentKey= expiry= "
    operation_parameters["copyFeatureFlag"]="projectKey= featureFlagKey= "
    operation_parameters["deleteFeatureFlag"]="projectKey= featureFlagKey= "
    operation_parameters["deleteFeatureFlagApprovalRequest"]="projectKey= environmentKey= featureFlagKey= featureFlagApprovalRequestId= "
    operation_parameters["getExpiringUserTargets"]="projectKey= environmentKey= featureFlagKey= "
    operation_parameters["getFeatureFlag"]="projectKey= featureFlagKey= env= "
    operation_parameters["getFeatureFlagApprovalRequest"]="projectKey= featureFlagKey= environmentKey= featureFlagApprovalRequestId= "
    operation_parameters["getFeatureFlagApprovalRequests"]="projectKey= featureFlagKey= environmentKey= "
    operation_parameters["getFeatureFlagStatus"]="projectKey= environmentKey= featureFlagKey= "
    operation_parameters["getFeatureFlagStatusAcrossEnvironments"]="projectKey= featureFlagKey= "
    operation_parameters["getFeatureFlagStatuses"]="projectKey= environmentKey= "
    operation_parameters["getFeatureFlags"]="projectKey= env= summary= archived= limit= offset= filter= sort= tag= "
    operation_parameters["patchExpiringUserTargets"]="projectKey= environmentKey= featureFlagKey= "
    operation_parameters["patchFeatureFlag"]="projectKey= featureFlagKey= "
    operation_parameters["postApplyFeatureFlagApprovalRequest"]="projectKey= featureFlagKey= environmentKey= featureFlagApprovalRequestId= "
    operation_parameters["postFeatureFlag"]="projectKey= clone= "
    operation_parameters["postFeatureFlagApprovalRequest"]="projectKey= featureFlagKey= environmentKey= featureFlagApprovalRequestId= "
    operation_parameters["postReviewFeatureFlagApprovalRequest"]="projectKey= featureFlagKey= environmentKey= featureFlagApprovalRequestId= "
    operation_parameters["deleteIntegrationSubscription"]="integrationKey= integrationId= "
    operation_parameters["getIntegrationSubscription"]="integrationKey= integrationId= "
    operation_parameters["getIntegrationSubscriptions"]="integrationKey= "
    operation_parameters["getIntegrations"]=""
    operation_parameters["patchIntegrationSubscription"]="integrationKey= integrationId= "
    operation_parameters["postIntegrationSubscription"]="integrationKey= "
    operation_parameters["deleteProject"]="projectKey= "
    operation_parameters["getProject"]="projectKey= "
    operation_parameters["getProjects"]=""
    operation_parameters["patchProject"]="projectKey= "
    operation_parameters["postProject"]=""
    operation_parameters["deleteRelayProxyConfig"]="id= "
    operation_parameters["getRelayProxyConfig"]="id= "
    operation_parameters["getRelayProxyConfigs"]=""
    operation_parameters["patchRelayProxyConfig"]="id= "
    operation_parameters["postRelayAutoConfig"]=""
    operation_parameters["resetRelayProxyConfig"]="id= expiry= "
    operation_parameters["getRoot"]=""
    operation_parameters["deleteMember"]="memberId= "
    operation_parameters["getMe"]=""
    operation_parameters["getMember"]="memberId= "
    operation_parameters["getMembers"]="limit= offset= filter= sort= "
    operation_parameters["patchMember"]="memberId= "
    operation_parameters["postMembers"]=""
    operation_parameters["deleteUserSegment"]="projectKey= environmentKey= userSegmentKey= "
    operation_parameters["getExpiringUserTargetsOnSegment"]="projectKey= environmentKey= userSegmentKey= "
    operation_parameters["getUserSegment"]="projectKey= environmentKey= userSegmentKey= "
    operation_parameters["getUserSegments"]="projectKey= environmentKey= tag= "
    operation_parameters["patchExpiringUserTargetsOnSegment"]="projectKey= environmentKey= userSegmentKey= "
    operation_parameters["patchUserSegment"]="projectKey= environmentKey= userSegmentKey= "
    operation_parameters["postUserSegment"]="projectKey= environmentKey= "
    operation_parameters["updatedUnboundedSegmentTargets"]="projectKey= environmentKey= userSegmentKey= "
    operation_parameters["getExpiringUserTargetsForUser"]="projectKey= environmentKey= userKey= "
    operation_parameters["getUserFlagSetting"]="projectKey= environmentKey= userKey= featureFlagKey= "
    operation_parameters["getUserFlagSettings"]="projectKey= environmentKey= userKey= "
    operation_parameters["patchExpiringUserTargetsForFlags"]="projectKey= environmentKey= userKey= "
    operation_parameters["putFlagSetting"]="projectKey= environmentKey= userKey= featureFlagKey= "
    operation_parameters["deleteUser"]="projectKey= environmentKey= userKey= "
    operation_parameters["getSearchUsers"]="projectKey= environmentKey= q= limit= offset= after= "
    operation_parameters["getUser"]="projectKey= environmentKey= userKey= "
    operation_parameters["getUsers"]="projectKey= environmentKey= limit= h= scrollId= "
    operation_parameters["deleteWebhook"]="resourceId= "
    operation_parameters["getWebhook"]="resourceId= "
    operation_parameters["getWebhooks"]=""
    operation_parameters["patchWebhook"]="resourceId= "
    operation_parameters["postWebhook"]=""

    # An associative array of possible values for enum parameters
    declare -A operation_parameters_enum_values
    operation_parameters_enum_values["getTokens::showAll"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"
    operation_parameters_enum_values["getFeatureFlags::summary"]="true false"
    operation_parameters_enum_values["getFeatureFlags::archived"]="true false"

    #
    # Check if this is OSX and use special __osx_init_completion function
    #
    if [[ `uname` =~ "Darwin" ]]; then
        __osx_init_completion || return
    else
        _init_completion -s || return
    fi


    # Check if operation is already in the command line provided
    for word in "${words[@]}"; do
        if [[ -n $word && ${operations[$word]} ]]; then
            operation="${word}"
        fi
    done

    if [[ -z $operation ]]; then
        case $prev in
            --ciphers|--connect-timeout|-C|--continue-at|-F|--form|--form-string|\
            --ftp-account|--ftp-alternative-to-user|-P|--ftp-port|-H|--header|-h|\
            --help|--hostpubmd5|--keepalive-time|--krb|--limit-rate|--local-port|\
            --mail-from|--mail-rcpt|--max-filesize|--max-redirs|-m|--max-time|\
            --pass|--proto|--proto-redir|--proxy-user|--proxy1.0|-Q|--quote|-r|\
            --range|-X|--request|--retry|--retry-delay|--retry-max-time|\
            --socks5-gssapi-service|-t|--telnet-option|--tftp-blksize|-z|\
            --time-cond|--url|-u|--user|-A|--user-agent|-V|--version|-w|\
            --write-out|--resolve|--tlsuser|--tlspassword|--about)
                return
                ;;
            -K|--config|-b|--cookie|-c|--cookie-jar|-D|--dump-header|--egd-file|\
            --key|--libcurl|-o|--output|--random-file|-T|--upload-file|--trace|\
            --trace-ascii|--netrc-file)
                _filedir
                return
                ;;
            --cacert|-E|--cert)
                _filedir '@(c?(e)rt|cer|pem|der)'
                return
                ;;
            --capath)
                _filedir -d
                return
                ;;
            --cert-type|--key-type)
                COMPREPLY=( $( compgen -W 'DER PEM ENG' -- "$cur" ) )
                return
                ;;
            --crlfile)
                _filedir crl
                return
                ;;
            -d|--data|--data-ascii|--data-binary|--data-urlencode)
                if [[ $cur == \@* ]]; then
                    cur=${cur:1}
                    _filedir
                    COMPREPLY=( "${COMPREPLY[@]/#/@}" )
                fi
                return
                ;;
            --delegation)
                COMPREPLY=( $( compgen -W 'none policy always' -- "$cur" ) )
                return
                ;;
            --engine)
                COMPREPLY=( $( compgen -W 'list' -- "$cur" ) )
                return
                ;;
            --ftp-method)
                COMPREPLY=( $( compgen -W 'multicwd nocwd singlecwd' -- "$cur" ) )
                return
                ;;
            --ftp-ssl-ccc-mode)
                COMPREPLY=( $( compgen -W 'active passive' -- "$cur" ) )
                return
                ;;
            --interface)
                _available_interfaces -a
                return
                ;;
            -x|--proxy|--socks4|--socks4a|--socks5|--socks5-hostname)
                _known_hosts_real
                return
                ;;
            --pubkey)
                _filedir pub
                return
                ;;
            --stderr)
                COMPREPLY=( $( compgen -W '-' -- "$cur" ) )
                _filedir
                return
                ;;
            --tlsauthtype)
                COMPREPLY=( $( compgen -W 'SRP' -- "$cur" ) )
                return
                ;;
            --host)
                COMPREPLY=( $( compgen -W 'http:// https://' -- "$cur" ) )
                return
                ;;
            -ct|--content-type|-ac|--accept)
                COMPREPLY=( $( compgen -W '${!mime_type_abbreviations[*]}' -- "$cur" ) )
                return
                ;;
        esac
    fi

    #
    # Complete the server address based on ~/.ssh/known_hosts
    # and ~/.ssh/config
    #
    local prefix=${COMP_WORDS[COMP_CWORD-2]}
    local colon=${COMP_WORDS[COMP_CWORD-1]}
    if [[ "$colon" == ":" && ( $prefix == "https" || $prefix == "http" ) ]]; then
        COMPREPLY=()
        local comp_ssh_hosts=`[[ -f ~/.ssh/known_hosts ]] && \
                              ( cat ~/.ssh/known_hosts | \
                              grep '^[a-zA-Z0-9]' | \
                              cut -f 1 -d ' ' | \
                              sed -e s/,.*//g | \
                              grep -v ^# | \
                              uniq | \
                              grep -v "\[" ) ;
                              [[ -f ~/.ssh/config ]] && \
                              ( cat ~/.ssh/config | \
                              grep "^Host " | \
                              awk '{print $2}' )`
        COMPREPLY=( $( compgen -P '//' -W '${comp_ssh_hosts}' -- "${cur:2}") )
        return
    fi

    #
    # Complete the  and cURL's arguments
    #
    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$(_parse_help curl) $(_parse_help $1)' -- "$cur" ) )
        return
    fi

    #
    # If the argument starts with a letter this could be either an operation
    # or an operation parameter
    # When $cur is empty, suggest the list of operations by default
    #
    if [[ $cur =~ ^[A-Za-z_0-9]* ]]; then
        # If operation has not been yet selected, suggest the list of operations
        # otherwise suggest arguments of this operation as declared in the
        # Swagger specification
        if [[ -z $operation ]]; then
            COMPREPLY=( $(compgen -W '${!operations[*]}' -- ${cur}) )
        else
            COMPREPLY=( $(compgen -W '${operation_parameters[$operation]}' -- ${cur}) )
            compopt -o nospace
        fi
        return
    fi

} &&
complete -F _ 

# ex: ts=4 sw=4 et filetype=sh
